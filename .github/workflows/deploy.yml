# 폴더 구조는 .github/workflows 구조로. 근데 파일 이름은 걍 적어도 됨

name: First CICD Deploy

on:
  push:
    branches:
      - main

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository에 올린 파일 불러오기
        uses: actions/checkout@v2

      # 근데 말이야.. checkout이라는 라이브러리 써서
      # 내 깃허브 프로젝트 잘 가져온거 맞음....? -> 테스트 해보기
      - name: Checkout Library Test
        run: |
          ls
          pwd

      - name: JDK 17 버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml

      - name: 테스트 및 빌드하기
        run: |
          chmod +x ./gradlew
          ./gradlew clean build

      - name: 빌드된 파일 이름 변경하기
        run: mv ./build/libs/*SNAPSHOT.jar ./project.jar


      - name: 압축하기 -> 곧 S3 로 움직일 거임
        run: tar -czvf $GITHUB_SHA.tar.gz project.jar appspec.yml scripts

      - name: AWS 자원에 접근 가능하게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: S3에 프로젝트 폴더 업로드하기
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.tar.gz s3://CICDSpringBootTest/$GITHUB_SHA.tar.gz

      - name: 코드디플로이를 활용해 EC2에 프로젝트 코드를 배포하라고 명령
        run: aws deploy create-deployment
            --application-name CICDSpringBootTest
            --deployment-config CodeDeployDefault.AllAtOnce
            --deployment-group-name Production
            --s3-location bucket=cicd-test-s3-typehoon-auhfkvzj,bundleType=tgz,key=$GITHUB_SHA.tar.gz




# 처음 했던 코드
#      - name: SSH로 EC2 원격 접속하기
#        uses: appleboy/ssh-action@v1.1.0
#        env:
#          APPLICATION_PROPERTIES: ${{ secrets.APPLICATION_PROPERTIES }}
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_PRIVATE_KEY }}
#          envs: APPLICATION_PROPERTIES
#          script_stop: true
#          #script 중간에 || true 있는건, 혹시나 8080이 안진행되고 있을때
#          #끄겠다고 하면 에러날수도 있음. 그냥 없었어도 잘 했구나 해줘야함
#          script: |
#            cd /home/ubuntu/CICDSpringBootTest
#            rm -rf src/main/resources/application.yml
#            git pull origin main
#            echo "$APPLICATION_PROPERTIES" > src/main/resources/application.yml
#            chmod +x ./gradlew
#            ./gradlew clean build
#            sudo fuser -k -n tcp 8080 || true
#            sudo fuser -k -n tcp 80 || true
#            sudo nohup java -jar build/libs/*SNAPSHOT.jar > ./output.log 2>&1 &
#


# 원래 이거로 EC2 접근 했었는데, 방식 3으로 하면 좀 다름 (codedeploy 랑 s3에 접근하게 됨)
# 근데 사실 이거 저장 안해서 큰일나긴 함 ㅋ
#      - name: Get Actions IP
#        id: ip
#        uses: haythem/public-ip@v1.3
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: 'ap-northeast-2'
#      - name: Add GitHub Actions IP
#        run: |
#          aws ec2 authorize-security-group-ingress \
#              --group-id ${{ secrets.SECURITY_GROUP_ID }} \
#              --protocol tcp \
#              --port 22 \
#              --cidr ${{ steps.ip.outputs.ipv4 }}/32


#
#
#      - name: SCP로 EC2에 빌드된 파일을 업로드
#        uses: appleboy/scp-action@v0.1.7
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_PRIVATE_KEY }}
#          source: project.jar
#          target: /home/ubuntu/CICDSpringBootTest/tobe
#
#      - name: SSH로 EC2 원격 접속하기
#        uses: appleboy/ssh-action@v1.1.0
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_PRIVATE_KEY }}
#          script_stop: true
#          script: |
#            rm -rf /home/ubuntu/CICDSpringBootTest/current
#            mkdir /home/ubuntu/CICDSpringBootTest/current
#            mv /home/ubuntu/CICDSpringBootTest/tobe/project.jar /home/ubuntu/CICDSpringBootTest/current/project.jar
#            cd /home/ubuntu/CICDSpringBootTest/current
#            sudo juser -k -n tcp 8080 || true
#            sudo nohup java -jar project.jar > ./output.log 2>&1 &
#            rm -rf /home/ubuntu/CICDSpringBootTest/tobe



